import ssl

ssl._create_default_https_context = ssl._create_unverified_context

import sounddevice as sd
import numpy as np
import whisper
import time
import queue

# –¥–∞–ª—ñ –≤–∞—à –∫–æ–¥...


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
SAMPLE_RATE = 16000
BLOCK_SECONDS = 5  # –∫–æ–∂–Ω—ñ 5 —Å–µ–∫ –æ–±—Ä–æ–±–∫–∞

# –ß–µ—Ä–≥–∞ –¥–ª—è –∞—É–¥—ñ–æ–¥–∞–Ω–∏—Ö
audio_queue = queue.Queue()

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Whisper-–º–æ–¥–µ–ª—ñ
print("üîÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ Whisper...")
model = whisper.load_model("small")
print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –°–ª—É—Ö–∞—î–º–æ...")


# –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
def audio_callback(indata, frames, time_info, status):
    if status:
        print("‚ö†Ô∏è", status)
    audio_queue.put(indata.copy())


# –ü–æ—à—É–∫ —ñ–Ω–¥–µ–∫—Å—É –ø—Ä–∏—Å—Ç—Ä–æ—é "BlackHole 2ch"
device_name = "BlackHole 2ch"
device_index = None
for idx, dev in enumerate(sd.query_devices()):
    if device_name in dev['name']:
        device_index = idx
        break

if device_index is None:
    raise RuntimeError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π BlackHole 2ch")

# –ê—É–¥—ñ–æ –ø–æ—Ç—ñ–∫
with sd.InputStream(
        samplerate=SAMPLE_RATE,
        channels=1,
        dtype='float32',
        callback=audio_callback,
        blocksize=0,
        device=device_index
):
    buffer = np.empty((0, 1), dtype='float32')
    last_time = time.time()

    while True:
        try:
            data = audio_queue.get()
            buffer = np.append(buffer, data, axis=0)

            # –æ–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω—ñ N —Å–µ–∫—É–Ω–¥
            if time.time() - last_time > BLOCK_SECONDS:
                last_time = time.time()
                if len(buffer) == 0:
                    continue

                # –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É
                audio = buffer.flatten()
                buffer = np.empty((0, 1), dtype='float32')

                # –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ —Ç–∏–º—á–∞—Å–æ–≤–æ –≤ .wav
                print("üîä –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–ª–µ–Ω–Ω—è...")
                result = model.transcribe(audio, fp16=False, language='uk')  # –∞–±–æ 'uk'
                print(f"[üó£Ô∏è]: {result['text'].strip()}\n")

        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è...")
            break
